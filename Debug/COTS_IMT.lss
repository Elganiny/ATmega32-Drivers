
COTS_IMT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000093a  000009ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800082  00800082  000009f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001448  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000994  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e23  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  000037d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083a  00000000  00000000  00003b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001197  00000000  00000000  000043a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000553d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_1>
   8:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_2>
   c:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9b 04 	jmp	0x936	; 0x936 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{
	u8 temp = 0 ;

	/* initializing the LCD */
	CLCD_voidInit();
  92:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CLCD_voidInit>


	while(1)
	{
		/* getting the value measured by the LM35 sensor */
		temp = LM35_getTemperature();
  96:	0e 94 18 01 	call	0x230	; 0x230 <LM35_getTemperature>

		if(temp >= 60)
  9a:	8c 33       	cpi	r24, 0x3C	; 60
  9c:	48 f0       	brcs	.+18     	; 0xb0 <main+0x1e>
		{
			CLCD_voidGoToXY(1,2);
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 0c 01 	call	0x218	; 0x218 <CLCD_voidGoToXY>
			CLCD_voidSendString("60 degreea");
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <CLCD_voidSendString>
  ae:	f3 cf       	rjmp	.-26     	; 0x96 <main+0x4>
		}
		else if(temp >= 30)
  b0:	8e 31       	cpi	r24, 0x1E	; 30
  b2:	48 f0       	brcs	.+18     	; 0xc6 <main+0x34>
		{
			CLCD_voidGoToXY(1,2);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 0c 01 	call	0x218	; 0x218 <CLCD_voidGoToXY>
			CLCD_voidSendString("30 degreea");
  bc:	8b e6       	ldi	r24, 0x6B	; 107
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <CLCD_voidSendString>
  c4:	e8 cf       	rjmp	.-48     	; 0x96 <main+0x4>
		}
		else
		{
			CLCD_voidGoToXY(1,2);
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 0c 01 	call	0x218	; 0x218 <CLCD_voidGoToXY>
			CLCD_voidSendString("Notttttttt");
  ce:	86 e7       	ldi	r24, 0x76	; 118
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <CLCD_voidSendString>
  d6:	df cf       	rjmp	.-66     	; 0x96 <main+0x4>

000000d8 <ADC_init>:
#include "ADC_register.h"
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
  d8:	fc 01       	movw	r30, r24
	/*
	 *  initialization of ADMUX register
	 * the first #if is for choosing which mode of the reference voltage
	 * so, what should be done is to set in the adc.h the mode you want by one
	 */
	if ( Config_Ptr -> ref_volt == 3 )/* if the internal 2.65v reference voltage is set */
  da:	90 81       	ld	r25, Z
  dc:	93 30       	cpi	r25, 0x03	; 3
  de:	19 f4       	brne	.+6      	; 0xe6 <ADC_init+0xe>
		 * and one if shift is applied on the ADC register
		 */
#if ADC_LEFT_ADJUST_RESULT == OFF
		/* For turning off the "ADC left adjust result" ADLAR bit is cleared */
		/* REFS0 & REFS1 are set to 1 for enabling the internal 2.65v mode   */
		ADMUX = (1 << ADMUX_REFS0) | (1 << ADMUX_REFS1);
  e0:	80 ec       	ldi	r24, 0xC0	; 192
  e2:	87 b9       	out	0x07, r24	; 7
  e4:	0b c0       	rjmp	.+22     	; 0xfc <ADC_init+0x24>
#else
		/* For turning on the "ADC left adjust result" ADLAR bit is set by 1 */
		ADMUX = (1<<ADMUX_ADLAR) | (1 << ADMUX_REFS0) | (1 << ADMUX_REFS1);
#endif
	}
	else if ((Config_Ptr -> ref_volt) == 1)/* AVCC with external capacitor at AREF pin */
  e6:	91 30       	cpi	r25, 0x01	; 1
  e8:	19 f4       	brne	.+6      	; 0xf0 <ADC_init+0x18>
	{
#if ADC_LEFT_ADJUST_RESULT == OFF
		/* For turning off the "ADC left adjust result" ADLAR bit is cleared */
		/* REFS0 is set to 1 & REFS1 is cleared for enabling the AVCC mode   */
		ADMUX = (1 << ADMUX_REFS0);
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	87 b9       	out	0x07, r24	; 7
  ee:	06 c0       	rjmp	.+12     	; 0xfc <ADC_init+0x24>
#else
		/* For turning on the "ADC left adjust result" ADLAR bit is set by 1 */
		ADMUX = (1<<ADMUX_ADLAR) | (1 << ADMUX_REFS0);
#endif
	}
	else if ((Config_Ptr -> ref_volt) == 0) /*turning off the internal reference voltage*/
  f0:	91 11       	cpse	r25, r1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <ADC_init+0x20>
	{
#if ADC_LEFT_ADJUST_RESULT == OFF
		/* For turning off the "ADC left adjust result" ADLAR bit is cleared */
		/* REFS0 & REFS1 are both cleared for Disabling the internal 2.65v mode   */
		ADMUX = 0 ;
  f4:	17 b8       	out	0x07, r1	; 7
  f6:	02 c0       	rjmp	.+4      	; 0xfc <ADC_init+0x24>
	else/* no action is taken */
	{
#if ADC_LEFT_ADJUST_RESULT == OFF
		/* For turning off the "ADC left adjust result" ADLAR bit is cleared */
		/* REFS0 is cleared & REFS1 is set by 1 for Reserved mode(i.e. no action is taken) */
		ADMUX = (1 << ADMUX_REFS1);
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	87 b9       	out	0x07, r24	; 7
		 */
#if ADC_AUTO_TRIGGER_ENABLE == OFF

	#if ADC_INTERRUPT_ENABLE == OFF
		/* setting the pre-scaler that is passed by address through the pointer to structure config_ptr  */
		ADCSRA = Config_Ptr -> prescaler | (1<<ADCSRA_ADEN); /* ADEN is set to enable the ADC */
  fc:	81 81       	ldd	r24, Z+1	; 0x01
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	86 b9       	out	0x06, r24	; 6
 102:	08 95       	ret

00000104 <ADC_readChannel>:
u16 ADC_readChannel(u8 ch_num)
{
	/* ADMUX & 0xE0 to save the most significant 3 bits (REFS1 REFS0 ADLAR)  *
	 * then operating the " | " with the channel number to set which channel *
	 * of the 8 channels will work.											 */
	ADMUX = (ADMUX & 0xE0) | (ch_num & 0x07);
 104:	97 b1       	in	r25, 0x07	; 7
 106:	90 7e       	andi	r25, 0xE0	; 224
 108:	87 70       	andi	r24, 0x07	; 7
 10a:	89 2b       	or	r24, r25
 10c:	87 b9       	out	0x07, r24	; 7

	/* ADSC bit is set for starting the conversion */
	SET_BIT(ADCSRA , ADCSRA_ADSC);
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	80 64       	ori	r24, 0x40	; 64
 112:	86 b9       	out	0x06, r24	; 6

	/* waiting till the conversion is done */
	while(!(ADCSRA & (1<<ADCSRA_ADIF)));
 114:	34 9b       	sbis	0x06, 4	; 6
 116:	fe cf       	rjmp	.-4      	; 0x114 <ADC_readChannel+0x10>

	/* ADIF is the ADC interrupt flag which is cleared when the interrupt is done since    *
	 * we are working with pooling technique then we should clear it by ourselves through  *
	 * writing 1 in this bit.                                                              */
	SET_BIT(ADCSRA , ADCSRA_ADIF);
 118:	86 b1       	in	r24, 0x06	; 6
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	86 b9       	out	0x06, r24	; 6

	/* then after doing the conversion we need to return the converted data *
	 * which exists in the ADC register.                                    */
	return ADC ;
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	95 b1       	in	r25, 0x05	; 5
 122:	08 95       	ret

00000124 <CLCD_voidSendCommand>:

#include "CLCD_interface.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	#if CLCD_MODE == EIGHT_BITS
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	67 e0       	ldi	r22, 0x07	; 7
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_u8SetPinValue>

	/*Set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	66 e0       	ldi	r22, 0x06	; 6
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
 13c:	6c 2f       	mov	r22, r28
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	65 e0       	ldi	r22, 0x05	; 5
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	8f e8       	ldi	r24, 0x8F	; 143
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <CLCD_voidSendCommand+0x2e>
 156:	00 c0       	rjmp	.+0      	; 0x158 <CLCD_voidSendCommand+0x34>
 158:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_u8SetPinValue>
	/* SEND ENABLE PULSE */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
	#endif
}
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
	#if CLCD_MODE == EIGHT_BITS
	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	67 e0       	ldi	r22, 0x07	; 7
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_u8SetPinValue>

	/*Set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	66 e0       	ldi	r22, 0x06	; 6
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_u8SetPinValue>

	/*Set Data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
 180:	6c 2f       	mov	r22, r28
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	65 e0       	ldi	r22, 0x05	; 5
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_u8SetPinValue>
 192:	8f e8       	ldi	r24, 0x8F	; 143
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <CLCD_voidSendData+0x2e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <CLCD_voidSendData+0x34>
 19c:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	65 e0       	ldi	r22, 0x05	; 5
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_u8SetPinValue>
	/* SEND ENABLE PULSE */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
	#endif
}
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <CLCD_voidInit>:

void CLCD_voidInit(void)
{
	#if CLCD_MODE == EIGHT_BITS
	DIO_u8SetPortDirection(DIO_u8PORTC,DIO_u8PORT_OUTPUT);
 1ac:	6f ef       	ldi	r22, 0xFF	; 255
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PORT_OUTPUT);
 1b4:	4f ef       	ldi	r20, 0xFF	; 255
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 43 01 	call	0x286	; 0x286 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PORT_OUTPUT);
 1be:	4f ef       	ldi	r20, 0xFF	; 255
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 43 01 	call	0x286	; 0x286 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN2,DIO_u8PORT_OUTPUT);
 1c8:	4f ef       	ldi	r20, 0xFF	; 255
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 43 01 	call	0x286	; 0x286 <DIO_u8SetPinDirection>
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	9f e1       	ldi	r25, 0x1F	; 31
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <CLCD_voidInit+0x2a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <CLCD_voidInit+0x30>
 1dc:	00 00       	nop
	
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: 2 lines, 5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
 1de:	88 e3       	ldi	r24, 0x38	; 56
 1e0:	0e 94 92 00 	call	0x124	; 0x124 <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	0e 94 92 00 	call	0x124	; 0x124 <CLCD_voidSendCommand>

	/*Clear display*/
	CLCD_voidSendCommand(1);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 92 00 	call	0x124	; 0x124 <CLCD_voidSendCommand>
 1f0:	08 95       	ret

000001f2 <CLCD_voidSendString>:
	  CLCD_voidSendCommand(0x01);
	 #endif
}

void CLCD_voidSendString(char* Copy_pcString)
{
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	8c 01       	movw	r16, r24
	u8 local_u8counter = 0;
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_pcString[local_u8counter] != '\0')
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <CLCD_voidSendString+0x12>
	{
		CLCD_voidSendData(Copy_pcString[local_u8counter]);
 1fe:	0e 94 b4 00 	call	0x168	; 0x168 <CLCD_voidSendData>
		local_u8counter++;
 202:	cf 5f       	subi	r28, 0xFF	; 255
}

void CLCD_voidSendString(char* Copy_pcString)
{
	u8 local_u8counter = 0;
	while(Copy_pcString[local_u8counter] != '\0')
 204:	f8 01       	movw	r30, r16
 206:	ec 0f       	add	r30, r28
 208:	f1 1d       	adc	r31, r1
 20a:	80 81       	ld	r24, Z
 20c:	81 11       	cpse	r24, r1
 20e:	f7 cf       	rjmp	.-18     	; 0x1fe <CLCD_voidSendString+0xc>
	{
		CLCD_voidSendData(Copy_pcString[local_u8counter]);
		local_u8counter++;
	}
}
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
#if CLCD_MODE == EIGHT_BITS
	u8 local_u8Address = 0;
	if (Copy_u8XPos == 0)
 218:	88 23       	and	r24, r24
 21a:	29 f0       	breq	.+10     	; 0x226 <CLCD_voidGoToXY+0xe>
	{
		local_u8Address = Copy_u8YPos;
	} 
	else if (Copy_u8XPos == 1)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	11 f4       	brne	.+4      	; 0x224 <CLCD_voidGoToXY+0xc>
	{
		local_u8Address = Copy_u8YPos + 0x40;
 220:	60 5c       	subi	r22, 0xC0	; 192
 222:	01 c0       	rjmp	.+2      	; 0x226 <CLCD_voidGoToXY+0xe>
}

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
#if CLCD_MODE == EIGHT_BITS
	u8 local_u8Address = 0;
 224:	60 e0       	ldi	r22, 0x00	; 0
	} 
	else if (Copy_u8XPos == 1)
	{
		local_u8Address = Copy_u8YPos + 0x40;
	}
	CLCD_voidSendCommand(local_u8Address + 128);
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	86 0f       	add	r24, r22
 22a:	0e 94 92 00 	call	0x124	; 0x124 <CLCD_voidSendCommand>
 22e:	08 95       	ret

00000230 <LM35_getTemperature>:
 * it also, takes the value that the ADC read then applying the following equation:
 *       (adc_value * SENSOR_MAX_TEMPERATURE * reference_volt)/(1023 * SENSOR_MAX_VOLT_VALUE)
 * then saving the result in "temp_value" and returning it.
 */
u8 LM35_getTemperature (void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <LM35_getTemperature+0x6>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	u8 temp_value = 0;/* to save the final calculated temperature value */
	u16 adc_value = 0;/* to save the value read by the ADC */

	/* the following is a structure that contains :
	 * the required mode of the reference voltage & the pre-scaler */
	ADC_ConfigType CONFIGURATION = {INTERNAL_REFERENCE_VOLTAGE , FCPU_128};
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	8a 83       	std	Y+2, r24	; 0x02

	/* initializing the ADC by passing the configuration data through the structure explained above */
	ADC_init(&CONFIGURATION);
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 6c 00 	call	0xd8	; 0xd8 <ADC_init>

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 82 00 	call	0x104	; 0x104 <ADC_readChannel>

	/* Calculate the temperature from the ADC value*/
	temp_value = (u8)(((u32)adc_value * SENSOR_MAX_TEMPERATURE * 2.56)/(1023 * SENSOR_MAX_VOLT_VALUE));
 250:	9c 01       	movw	r18, r24
 252:	a6 e9       	ldi	r26, 0x96	; 150
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	0e 94 8c 04 	call	0x918	; 0x918 <__umulhisi3>
 25a:	0e 94 91 03 	call	0x722	; 0x722 <__floatunsisf>
 25e:	2a e0       	ldi	r18, 0x0A	; 10
 260:	37 ed       	ldi	r19, 0xD7	; 215
 262:	43 e2       	ldi	r20, 0x23	; 35
 264:	50 e4       	ldi	r21, 0x40	; 64
 266:	0e 94 1f 04 	call	0x83e	; 0x83e <__mulsf3>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 ed       	ldi	r19, 0xD0	; 208
 26e:	4f eb       	ldi	r20, 0xBF	; 191
 270:	54 e4       	ldi	r21, 0x44	; 68
 272:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__divsf3>
 276:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fixunssfsi>
 27a:	86 2f       	mov	r24, r22

	return temp_value ;
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
 286:	68 30       	cpi	r22, 0x08	; 8
 288:	08 f0       	brcs	.+2      	; 0x28c <DIO_u8SetPinDirection+0x6>
 28a:	78 c0       	rjmp	.+240    	; 0x37c <DIO_u8SetPinDirection+0xf6>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
 28c:	41 11       	cpse	r20, r1
 28e:	3c c0       	rjmp	.+120    	; 0x308 <DIO_u8SetPinDirection+0x82>
		{
			switch(Copy_u8Port)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	99 f0       	breq	.+38     	; 0x2ba <DIO_u8SetPinDirection+0x34>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <DIO_u8SetPinDirection+0x1a>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	e9 f0       	breq	.+58     	; 0x2d4 <DIO_u8SetPinDirection+0x4e>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	41 f1       	breq	.+80     	; 0x2ee <DIO_u8SetPinDirection+0x68>
 29e:	70 c0       	rjmp	.+224    	; 0x380 <DIO_u8SetPinDirection+0xfa>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 2a0:	2a b3       	in	r18, 0x1a	; 26
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_u8SetPinDirection+0x26>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_u8SetPinDirection+0x22>
 2b0:	80 95       	com	r24
 2b2:	82 23       	and	r24, r18
 2b4:	8a bb       	out	0x1a, r24	; 26

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 2b8:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 2ba:	27 b3       	in	r18, 0x17	; 23
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_u8SetPinDirection+0x40>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_u8SetPinDirection+0x3c>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	87 bb       	out	0x17, r24	; 23

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 2d2:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 2d4:	24 b3       	in	r18, 0x14	; 20
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_u8SetPinDirection+0x5a>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_u8SetPinDirection+0x56>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	84 bb       	out	0x14, r24	; 20

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 2ec:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 2ee:	21 b3       	in	r18, 0x11	; 17
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_u8SetPinDirection+0x74>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_u8SetPinDirection+0x70>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	81 bb       	out	0x11, r24	; 17

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 304:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 306:	08 95       	ret
			default: Local_u8ErrorState=1; break;
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
 308:	41 30       	cpi	r20, 0x01	; 1
 30a:	e1 f5       	brne	.+120    	; 0x384 <DIO_u8SetPinDirection+0xfe>
		{
			switch(Copy_u8Port)
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	91 f0       	breq	.+36     	; 0x334 <DIO_u8SetPinDirection+0xae>
 310:	28 f0       	brcs	.+10     	; 0x31c <DIO_u8SetPinDirection+0x96>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	d9 f0       	breq	.+54     	; 0x34c <DIO_u8SetPinDirection+0xc6>
 316:	83 30       	cpi	r24, 0x03	; 3
 318:	29 f1       	breq	.+74     	; 0x364 <DIO_u8SetPinDirection+0xde>
 31a:	36 c0       	rjmp	.+108    	; 0x388 <DIO_u8SetPinDirection+0x102>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 31c:	2a b3       	in	r18, 0x1a	; 26
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8SetPinDirection+0xa2>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8SetPinDirection+0x9e>
 32c:	82 2b       	or	r24, r18
 32e:	8a bb       	out	0x1a, r24	; 26

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 330:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 332:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 334:	27 b3       	in	r18, 0x17	; 23
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_u8SetPinDirection+0xba>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_u8SetPinDirection+0xb6>
 344:	82 2b       	or	r24, r18
 346:	87 bb       	out	0x17, r24	; 23

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 348:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 34a:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 34c:	24 b3       	in	r18, 0x14	; 20
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8SetPinDirection+0xd2>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8SetPinDirection+0xce>
 35c:	82 2b       	or	r24, r18
 35e:	84 bb       	out	0x14, r24	; 20

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 360:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 362:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 364:	21 b3       	in	r18, 0x11	; 17
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8SetPinDirection+0xea>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8SetPinDirection+0xe6>
 374:	82 2b       	or	r24, r18
 376:	81 bb       	out	0x11, r24	; 17

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 378:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 37a:	08 95       	ret
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
			default: Local_u8ErrorState=1; break;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret
			default: Local_u8ErrorState=1; break;
			}
		}
		else
		{
			Local_u8ErrorState=1;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
			default: Local_u8ErrorState=1; break;
 388:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 38a:	08 95       	ret

0000038c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	switch(Copy_u8Port)
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	49 f0       	breq	.+18     	; 0x3a2 <DIO_u8SetPortDirection+0x16>
 390:	28 f0       	brcs	.+10     	; 0x39c <DIO_u8SetPortDirection+0x10>
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	49 f0       	breq	.+18     	; 0x3a8 <DIO_u8SetPortDirection+0x1c>
 396:	83 30       	cpi	r24, 0x03	; 3
 398:	51 f0       	breq	.+20     	; 0x3ae <DIO_u8SetPortDirection+0x22>
 39a:	0c c0       	rjmp	.+24     	; 0x3b4 <DIO_u8SetPortDirection+0x28>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 39c:	6a bb       	out	0x1a, r22	; 26
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 39e:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 3a0:	08 95       	ret
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 3a2:	67 bb       	out	0x17, r22	; 23
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 3a4:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 3a6:	08 95       	ret
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 3a8:	64 bb       	out	0x14, r22	; 20
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 3aa:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 3ac:	08 95       	ret
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 3ae:	61 bb       	out	0x11, r22	; 17
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 3b2:	08 95       	ret
	default: Local_u8ErrorState=1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 3b6:	08 95       	ret

000003b8 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
 3b8:	68 30       	cpi	r22, 0x08	; 8
 3ba:	08 f0       	brcs	.+2      	; 0x3be <DIO_u8SetPinValue+0x6>
 3bc:	78 c0       	rjmp	.+240    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 3be:	41 11       	cpse	r20, r1
 3c0:	3c c0       	rjmp	.+120    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			switch(Copy_u8Port)
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	99 f0       	breq	.+38     	; 0x3ec <DIO_u8SetPinValue+0x34>
 3c6:	28 f0       	brcs	.+10     	; 0x3d2 <DIO_u8SetPinValue+0x1a>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	e9 f0       	breq	.+58     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	41 f1       	breq	.+80     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3d0:	70 c0       	rjmp	.+224    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 3d2:	2b b3       	in	r18, 0x1b	; 27
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_u8SetPinValue+0x26>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_u8SetPinValue+0x22>
 3e2:	80 95       	com	r24
 3e4:	82 23       	and	r24, r18
 3e6:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 3ea:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 3ec:	28 b3       	in	r18, 0x18	; 24
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8SetPinValue+0x40>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8SetPinValue+0x3c>
 3fc:	80 95       	com	r24
 3fe:	82 23       	and	r24, r18
 400:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 402:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 404:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 406:	25 b3       	in	r18, 0x15	; 21
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 41c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 41e:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 420:	22 b3       	in	r18, 0x12	; 18
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	80 95       	com	r24
 432:	82 23       	and	r24, r18
 434:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 436:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 438:	08 95       	ret
			default: Local_u8ErrorState=1; break;
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
 43a:	41 30       	cpi	r20, 0x01	; 1
 43c:	e1 f5       	brne	.+120    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{
			switch(Copy_u8Port)
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 f0       	breq	.+36     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 442:	28 f0       	brcs	.+10     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	d9 f0       	breq	.+54     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	29 f1       	breq	.+74     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 44c:	36 c0       	rjmp	.+108    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 44e:	2b b3       	in	r18, 0x1b	; 27
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	82 2b       	or	r24, r18
 460:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 462:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 464:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 466:	28 b3       	in	r18, 0x18	; 24
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	82 2b       	or	r24, r18
 478:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 47a:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 47c:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 47e:	25 b3       	in	r18, 0x15	; 21
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	82 2b       	or	r24, r18
 490:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 492:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 494:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 496:	22 b3       	in	r18, 0x12	; 18
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	82 2b       	or	r24, r18
 4a8:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 4aa:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 4ac:	08 95       	ret
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=1; break;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	08 95       	ret
			default: Local_u8ErrorState=1; break;
			}
		}
		else
		{
			Local_u8ErrorState=1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=1; break;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 4bc:	08 95       	ret

000004be <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

	switch(Copy_u8Port)
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	49 f0       	breq	.+18     	; 0x4d4 <DIO_u8SetPortValue+0x16>
 4c2:	28 f0       	brcs	.+10     	; 0x4ce <DIO_u8SetPortValue+0x10>
 4c4:	82 30       	cpi	r24, 0x02	; 2
 4c6:	49 f0       	breq	.+18     	; 0x4da <DIO_u8SetPortValue+0x1c>
 4c8:	83 30       	cpi	r24, 0x03	; 3
 4ca:	51 f0       	breq	.+20     	; 0x4e0 <DIO_u8SetPortValue+0x22>
 4cc:	0c c0       	rjmp	.+24     	; 0x4e6 <DIO_u8SetPortValue+0x28>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 4ce:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 4d0:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 4d2:	08 95       	ret
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 4d4:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 4d6:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 4d8:	08 95       	ret
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 4da:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 4dc:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 4de:	08 95       	ret
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 4e0:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 4e2:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 4e4:	08 95       	ret
	default: Local_u8ErrorState=1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 4e8:	08 95       	ret

000004ea <__vector_1>:
}

/*ISR of INT0*/
void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	2f 93       	push	r18
 4f6:	3f 93       	push	r19
 4f8:	4f 93       	push	r20
 4fa:	5f 93       	push	r21
 4fc:	6f 93       	push	r22
 4fe:	7f 93       	push	r23
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
	if(EXTI_pvInt0Func != NULL)
 50c:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <EXTI_pvInt0Func>
 510:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <EXTI_pvInt0Func+0x1>
 514:	30 97       	sbiw	r30, 0x00	; 0
 516:	09 f0       	breq	.+2      	; 0x51a <__vector_1+0x30>
	{
		EXTI_pvInt0Func();
 518:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
 51a:	ff 91       	pop	r31
 51c:	ef 91       	pop	r30
 51e:	bf 91       	pop	r27
 520:	af 91       	pop	r26
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	7f 91       	pop	r23
 528:	6f 91       	pop	r22
 52a:	5f 91       	pop	r21
 52c:	4f 91       	pop	r20
 52e:	3f 91       	pop	r19
 530:	2f 91       	pop	r18
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <__vector_2>:

/*ISR of INT1*/
void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)
{
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	2f 93       	push	r18
 548:	3f 93       	push	r19
 54a:	4f 93       	push	r20
 54c:	5f 93       	push	r21
 54e:	6f 93       	push	r22
 550:	7f 93       	push	r23
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	af 93       	push	r26
 558:	bf 93       	push	r27
 55a:	ef 93       	push	r30
 55c:	ff 93       	push	r31
	if(EXTI_pvInt1Func != NULL)
 55e:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <EXTI_pvInt1Func>
 562:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <EXTI_pvInt1Func+0x1>
 566:	30 97       	sbiw	r30, 0x00	; 0
 568:	09 f0       	breq	.+2      	; 0x56c <__vector_2+0x30>
	{
		EXTI_pvInt1Func();
 56a:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <__vector_3>:

/*ISR of INT2*/
void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)
{
 58e:	1f 92       	push	r1
 590:	0f 92       	push	r0
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	0f 92       	push	r0
 596:	11 24       	eor	r1, r1
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
	if(EXTI_pvInt2Func != NULL)
 5b0:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <__data_end>
 5b4:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <__data_end+0x1>
 5b8:	30 97       	sbiw	r30, 0x00	; 0
 5ba:	09 f0       	breq	.+2      	; 0x5be <__vector_3+0x30>
	{
		EXTI_pvInt2Func();
 5bc:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
 5be:	ff 91       	pop	r31
 5c0:	ef 91       	pop	r30
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	7f 91       	pop	r23
 5cc:	6f 91       	pop	r22
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	3f 91       	pop	r19
 5d4:	2f 91       	pop	r18
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__divsf3>:
 5e0:	0e 94 04 03 	call	0x608	; 0x608 <__divsf3x>
 5e4:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_round>
 5e8:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscB>
 5ec:	58 f0       	brcs	.+22     	; 0x604 <__divsf3+0x24>
 5ee:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_pscA>
 5f2:	40 f0       	brcs	.+16     	; 0x604 <__divsf3+0x24>
 5f4:	29 f4       	brne	.+10     	; 0x600 <__divsf3+0x20>
 5f6:	5f 3f       	cpi	r21, 0xFF	; 255
 5f8:	29 f0       	breq	.+10     	; 0x604 <__divsf3+0x24>
 5fa:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_inf>
 5fe:	51 11       	cpse	r21, r1
 600:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>
 604:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_nan>

00000608 <__divsf3x>:
 608:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_split3>
 60c:	68 f3       	brcs	.-38     	; 0x5e8 <__divsf3+0x8>

0000060e <__divsf3_pse>:
 60e:	99 23       	and	r25, r25
 610:	b1 f3       	breq	.-20     	; 0x5fe <__divsf3+0x1e>
 612:	55 23       	and	r21, r21
 614:	91 f3       	breq	.-28     	; 0x5fa <__divsf3+0x1a>
 616:	95 1b       	sub	r25, r21
 618:	55 0b       	sbc	r21, r21
 61a:	bb 27       	eor	r27, r27
 61c:	aa 27       	eor	r26, r26
 61e:	62 17       	cp	r22, r18
 620:	73 07       	cpc	r23, r19
 622:	84 07       	cpc	r24, r20
 624:	38 f0       	brcs	.+14     	; 0x634 <__divsf3_pse+0x26>
 626:	9f 5f       	subi	r25, 0xFF	; 255
 628:	5f 4f       	sbci	r21, 0xFF	; 255
 62a:	22 0f       	add	r18, r18
 62c:	33 1f       	adc	r19, r19
 62e:	44 1f       	adc	r20, r20
 630:	aa 1f       	adc	r26, r26
 632:	a9 f3       	breq	.-22     	; 0x61e <__divsf3_pse+0x10>
 634:	35 d0       	rcall	.+106    	; 0x6a0 <__divsf3_pse+0x92>
 636:	0e 2e       	mov	r0, r30
 638:	3a f0       	brmi	.+14     	; 0x648 <__divsf3_pse+0x3a>
 63a:	e0 e8       	ldi	r30, 0x80	; 128
 63c:	32 d0       	rcall	.+100    	; 0x6a2 <__divsf3_pse+0x94>
 63e:	91 50       	subi	r25, 0x01	; 1
 640:	50 40       	sbci	r21, 0x00	; 0
 642:	e6 95       	lsr	r30
 644:	00 1c       	adc	r0, r0
 646:	ca f7       	brpl	.-14     	; 0x63a <__divsf3_pse+0x2c>
 648:	2b d0       	rcall	.+86     	; 0x6a0 <__divsf3_pse+0x92>
 64a:	fe 2f       	mov	r31, r30
 64c:	29 d0       	rcall	.+82     	; 0x6a0 <__divsf3_pse+0x92>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	88 1f       	adc	r24, r24
 654:	bb 1f       	adc	r27, r27
 656:	26 17       	cp	r18, r22
 658:	37 07       	cpc	r19, r23
 65a:	48 07       	cpc	r20, r24
 65c:	ab 07       	cpc	r26, r27
 65e:	b0 e8       	ldi	r27, 0x80	; 128
 660:	09 f0       	breq	.+2      	; 0x664 <__divsf3_pse+0x56>
 662:	bb 0b       	sbc	r27, r27
 664:	80 2d       	mov	r24, r0
 666:	bf 01       	movw	r22, r30
 668:	ff 27       	eor	r31, r31
 66a:	93 58       	subi	r25, 0x83	; 131
 66c:	5f 4f       	sbci	r21, 0xFF	; 255
 66e:	3a f0       	brmi	.+14     	; 0x67e <__divsf3_pse+0x70>
 670:	9e 3f       	cpi	r25, 0xFE	; 254
 672:	51 05       	cpc	r21, r1
 674:	78 f0       	brcs	.+30     	; 0x694 <__divsf3_pse+0x86>
 676:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_inf>
 67a:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>
 67e:	5f 3f       	cpi	r21, 0xFF	; 255
 680:	e4 f3       	brlt	.-8      	; 0x67a <__divsf3_pse+0x6c>
 682:	98 3e       	cpi	r25, 0xE8	; 232
 684:	d4 f3       	brlt	.-12     	; 0x67a <__divsf3_pse+0x6c>
 686:	86 95       	lsr	r24
 688:	77 95       	ror	r23
 68a:	67 95       	ror	r22
 68c:	b7 95       	ror	r27
 68e:	f7 95       	ror	r31
 690:	9f 5f       	subi	r25, 0xFF	; 255
 692:	c9 f7       	brne	.-14     	; 0x686 <__divsf3_pse+0x78>
 694:	88 0f       	add	r24, r24
 696:	91 1d       	adc	r25, r1
 698:	96 95       	lsr	r25
 69a:	87 95       	ror	r24
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret
 6a0:	e1 e0       	ldi	r30, 0x01	; 1
 6a2:	66 0f       	add	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	88 1f       	adc	r24, r24
 6a8:	bb 1f       	adc	r27, r27
 6aa:	62 17       	cp	r22, r18
 6ac:	73 07       	cpc	r23, r19
 6ae:	84 07       	cpc	r24, r20
 6b0:	ba 07       	cpc	r27, r26
 6b2:	20 f0       	brcs	.+8      	; 0x6bc <__divsf3_pse+0xae>
 6b4:	62 1b       	sub	r22, r18
 6b6:	73 0b       	sbc	r23, r19
 6b8:	84 0b       	sbc	r24, r20
 6ba:	ba 0b       	sbc	r27, r26
 6bc:	ee 1f       	adc	r30, r30
 6be:	88 f7       	brcc	.-30     	; 0x6a2 <__divsf3_pse+0x94>
 6c0:	e0 95       	com	r30
 6c2:	08 95       	ret

000006c4 <__fixunssfsi>:
 6c4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_splitA>
 6c8:	88 f0       	brcs	.+34     	; 0x6ec <__fixunssfsi+0x28>
 6ca:	9f 57       	subi	r25, 0x7F	; 127
 6cc:	98 f0       	brcs	.+38     	; 0x6f4 <__fixunssfsi+0x30>
 6ce:	b9 2f       	mov	r27, r25
 6d0:	99 27       	eor	r25, r25
 6d2:	b7 51       	subi	r27, 0x17	; 23
 6d4:	b0 f0       	brcs	.+44     	; 0x702 <__fixunssfsi+0x3e>
 6d6:	e1 f0       	breq	.+56     	; 0x710 <__fixunssfsi+0x4c>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	1a f0       	brmi	.+6      	; 0x6e8 <__fixunssfsi+0x24>
 6e2:	ba 95       	dec	r27
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__fixunssfsi+0x14>
 6e6:	14 c0       	rjmp	.+40     	; 0x710 <__fixunssfsi+0x4c>
 6e8:	b1 30       	cpi	r27, 0x01	; 1
 6ea:	91 f0       	breq	.+36     	; 0x710 <__fixunssfsi+0x4c>
 6ec:	0e 94 18 04 	call	0x830	; 0x830 <__fp_zero>
 6f0:	b1 e0       	ldi	r27, 0x01	; 1
 6f2:	08 95       	ret
 6f4:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_zero>
 6f8:	67 2f       	mov	r22, r23
 6fa:	78 2f       	mov	r23, r24
 6fc:	88 27       	eor	r24, r24
 6fe:	b8 5f       	subi	r27, 0xF8	; 248
 700:	39 f0       	breq	.+14     	; 0x710 <__fixunssfsi+0x4c>
 702:	b9 3f       	cpi	r27, 0xF9	; 249
 704:	cc f3       	brlt	.-14     	; 0x6f8 <__fixunssfsi+0x34>
 706:	86 95       	lsr	r24
 708:	77 95       	ror	r23
 70a:	67 95       	ror	r22
 70c:	b3 95       	inc	r27
 70e:	d9 f7       	brne	.-10     	; 0x706 <__fixunssfsi+0x42>
 710:	3e f4       	brtc	.+14     	; 0x720 <__fixunssfsi+0x5c>
 712:	90 95       	com	r25
 714:	80 95       	com	r24
 716:	70 95       	com	r23
 718:	61 95       	neg	r22
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	8f 4f       	sbci	r24, 0xFF	; 255
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	08 95       	ret

00000722 <__floatunsisf>:
 722:	e8 94       	clt
 724:	09 c0       	rjmp	.+18     	; 0x738 <__floatsisf+0x12>

00000726 <__floatsisf>:
 726:	97 fb       	bst	r25, 7
 728:	3e f4       	brtc	.+14     	; 0x738 <__floatsisf+0x12>
 72a:	90 95       	com	r25
 72c:	80 95       	com	r24
 72e:	70 95       	com	r23
 730:	61 95       	neg	r22
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	8f 4f       	sbci	r24, 0xFF	; 255
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	99 23       	and	r25, r25
 73a:	a9 f0       	breq	.+42     	; 0x766 <__floatsisf+0x40>
 73c:	f9 2f       	mov	r31, r25
 73e:	96 e9       	ldi	r25, 0x96	; 150
 740:	bb 27       	eor	r27, r27
 742:	93 95       	inc	r25
 744:	f6 95       	lsr	r31
 746:	87 95       	ror	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b7 95       	ror	r27
 74e:	f1 11       	cpse	r31, r1
 750:	f8 cf       	rjmp	.-16     	; 0x742 <__floatsisf+0x1c>
 752:	fa f4       	brpl	.+62     	; 0x792 <__floatsisf+0x6c>
 754:	bb 0f       	add	r27, r27
 756:	11 f4       	brne	.+4      	; 0x75c <__floatsisf+0x36>
 758:	60 ff       	sbrs	r22, 0
 75a:	1b c0       	rjmp	.+54     	; 0x792 <__floatsisf+0x6c>
 75c:	6f 5f       	subi	r22, 0xFF	; 255
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	16 c0       	rjmp	.+44     	; 0x792 <__floatsisf+0x6c>
 766:	88 23       	and	r24, r24
 768:	11 f0       	breq	.+4      	; 0x76e <__floatsisf+0x48>
 76a:	96 e9       	ldi	r25, 0x96	; 150
 76c:	11 c0       	rjmp	.+34     	; 0x790 <__floatsisf+0x6a>
 76e:	77 23       	and	r23, r23
 770:	21 f0       	breq	.+8      	; 0x77a <__floatsisf+0x54>
 772:	9e e8       	ldi	r25, 0x8E	; 142
 774:	87 2f       	mov	r24, r23
 776:	76 2f       	mov	r23, r22
 778:	05 c0       	rjmp	.+10     	; 0x784 <__floatsisf+0x5e>
 77a:	66 23       	and	r22, r22
 77c:	71 f0       	breq	.+28     	; 0x79a <__floatsisf+0x74>
 77e:	96 e8       	ldi	r25, 0x86	; 134
 780:	86 2f       	mov	r24, r22
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	2a f0       	brmi	.+10     	; 0x792 <__floatsisf+0x6c>
 788:	9a 95       	dec	r25
 78a:	66 0f       	add	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	da f7       	brpl	.-10     	; 0x788 <__floatsisf+0x62>
 792:	88 0f       	add	r24, r24
 794:	96 95       	lsr	r25
 796:	87 95       	ror	r24
 798:	97 f9       	bld	r25, 7
 79a:	08 95       	ret

0000079c <__fp_inf>:
 79c:	97 f9       	bld	r25, 7
 79e:	9f 67       	ori	r25, 0x7F	; 127
 7a0:	80 e8       	ldi	r24, 0x80	; 128
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	08 95       	ret

000007a8 <__fp_nan>:
 7a8:	9f ef       	ldi	r25, 0xFF	; 255
 7aa:	80 ec       	ldi	r24, 0xC0	; 192
 7ac:	08 95       	ret

000007ae <__fp_pscA>:
 7ae:	00 24       	eor	r0, r0
 7b0:	0a 94       	dec	r0
 7b2:	16 16       	cp	r1, r22
 7b4:	17 06       	cpc	r1, r23
 7b6:	18 06       	cpc	r1, r24
 7b8:	09 06       	cpc	r0, r25
 7ba:	08 95       	ret

000007bc <__fp_pscB>:
 7bc:	00 24       	eor	r0, r0
 7be:	0a 94       	dec	r0
 7c0:	12 16       	cp	r1, r18
 7c2:	13 06       	cpc	r1, r19
 7c4:	14 06       	cpc	r1, r20
 7c6:	05 06       	cpc	r0, r21
 7c8:	08 95       	ret

000007ca <__fp_round>:
 7ca:	09 2e       	mov	r0, r25
 7cc:	03 94       	inc	r0
 7ce:	00 0c       	add	r0, r0
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <__fp_round+0xc>
 7d2:	88 23       	and	r24, r24
 7d4:	52 f0       	brmi	.+20     	; 0x7ea <__fp_round+0x20>
 7d6:	bb 0f       	add	r27, r27
 7d8:	40 f4       	brcc	.+16     	; 0x7ea <__fp_round+0x20>
 7da:	bf 2b       	or	r27, r31
 7dc:	11 f4       	brne	.+4      	; 0x7e2 <__fp_round+0x18>
 7de:	60 ff       	sbrs	r22, 0
 7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fp_round+0x20>
 7e2:	6f 5f       	subi	r22, 0xFF	; 255
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	8f 4f       	sbci	r24, 0xFF	; 255
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	08 95       	ret

000007ec <__fp_split3>:
 7ec:	57 fd       	sbrc	r21, 7
 7ee:	90 58       	subi	r25, 0x80	; 128
 7f0:	44 0f       	add	r20, r20
 7f2:	55 1f       	adc	r21, r21
 7f4:	59 f0       	breq	.+22     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	71 f0       	breq	.+28     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fa:	47 95       	ror	r20

000007fc <__fp_splitA>:
 7fc:	88 0f       	add	r24, r24
 7fe:	97 fb       	bst	r25, 7
 800:	99 1f       	adc	r25, r25
 802:	61 f0       	breq	.+24     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 804:	9f 3f       	cpi	r25, 0xFF	; 255
 806:	79 f0       	breq	.+30     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 808:	87 95       	ror	r24
 80a:	08 95       	ret
 80c:	12 16       	cp	r1, r18
 80e:	13 06       	cpc	r1, r19
 810:	14 06       	cpc	r1, r20
 812:	55 1f       	adc	r21, r21
 814:	f2 cf       	rjmp	.-28     	; 0x7fa <__fp_split3+0xe>
 816:	46 95       	lsr	r20
 818:	f1 df       	rcall	.-30     	; 0x7fc <__fp_splitA>
 81a:	08 c0       	rjmp	.+16     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	18 06       	cpc	r1, r24
 822:	99 1f       	adc	r25, r25
 824:	f1 cf       	rjmp	.-30     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 826:	86 95       	lsr	r24
 828:	71 05       	cpc	r23, r1
 82a:	61 05       	cpc	r22, r1
 82c:	08 94       	sec
 82e:	08 95       	ret

00000830 <__fp_zero>:
 830:	e8 94       	clt

00000832 <__fp_szero>:
 832:	bb 27       	eor	r27, r27
 834:	66 27       	eor	r22, r22
 836:	77 27       	eor	r23, r23
 838:	cb 01       	movw	r24, r22
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret

0000083e <__mulsf3>:
 83e:	0e 94 32 04 	call	0x864	; 0x864 <__mulsf3x>
 842:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_round>
 846:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_pscA>
 84a:	38 f0       	brcs	.+14     	; 0x85a <__mulsf3+0x1c>
 84c:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscB>
 850:	20 f0       	brcs	.+8      	; 0x85a <__mulsf3+0x1c>
 852:	95 23       	and	r25, r21
 854:	11 f0       	breq	.+4      	; 0x85a <__mulsf3+0x1c>
 856:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_inf>
 85a:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_nan>
 85e:	11 24       	eor	r1, r1
 860:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>

00000864 <__mulsf3x>:
 864:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_split3>
 868:	70 f3       	brcs	.-36     	; 0x846 <__mulsf3+0x8>

0000086a <__mulsf3_pse>:
 86a:	95 9f       	mul	r25, r21
 86c:	c1 f3       	breq	.-16     	; 0x85e <__mulsf3+0x20>
 86e:	95 0f       	add	r25, r21
 870:	50 e0       	ldi	r21, 0x00	; 0
 872:	55 1f       	adc	r21, r21
 874:	62 9f       	mul	r22, r18
 876:	f0 01       	movw	r30, r0
 878:	72 9f       	mul	r23, r18
 87a:	bb 27       	eor	r27, r27
 87c:	f0 0d       	add	r31, r0
 87e:	b1 1d       	adc	r27, r1
 880:	63 9f       	mul	r22, r19
 882:	aa 27       	eor	r26, r26
 884:	f0 0d       	add	r31, r0
 886:	b1 1d       	adc	r27, r1
 888:	aa 1f       	adc	r26, r26
 88a:	64 9f       	mul	r22, r20
 88c:	66 27       	eor	r22, r22
 88e:	b0 0d       	add	r27, r0
 890:	a1 1d       	adc	r26, r1
 892:	66 1f       	adc	r22, r22
 894:	82 9f       	mul	r24, r18
 896:	22 27       	eor	r18, r18
 898:	b0 0d       	add	r27, r0
 89a:	a1 1d       	adc	r26, r1
 89c:	62 1f       	adc	r22, r18
 89e:	73 9f       	mul	r23, r19
 8a0:	b0 0d       	add	r27, r0
 8a2:	a1 1d       	adc	r26, r1
 8a4:	62 1f       	adc	r22, r18
 8a6:	83 9f       	mul	r24, r19
 8a8:	a0 0d       	add	r26, r0
 8aa:	61 1d       	adc	r22, r1
 8ac:	22 1f       	adc	r18, r18
 8ae:	74 9f       	mul	r23, r20
 8b0:	33 27       	eor	r19, r19
 8b2:	a0 0d       	add	r26, r0
 8b4:	61 1d       	adc	r22, r1
 8b6:	23 1f       	adc	r18, r19
 8b8:	84 9f       	mul	r24, r20
 8ba:	60 0d       	add	r22, r0
 8bc:	21 1d       	adc	r18, r1
 8be:	82 2f       	mov	r24, r18
 8c0:	76 2f       	mov	r23, r22
 8c2:	6a 2f       	mov	r22, r26
 8c4:	11 24       	eor	r1, r1
 8c6:	9f 57       	subi	r25, 0x7F	; 127
 8c8:	50 40       	sbci	r21, 0x00	; 0
 8ca:	9a f0       	brmi	.+38     	; 0x8f2 <__mulsf3_pse+0x88>
 8cc:	f1 f0       	breq	.+60     	; 0x90a <__mulsf3_pse+0xa0>
 8ce:	88 23       	and	r24, r24
 8d0:	4a f0       	brmi	.+18     	; 0x8e4 <__mulsf3_pse+0x7a>
 8d2:	ee 0f       	add	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	bb 1f       	adc	r27, r27
 8d8:	66 1f       	adc	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	91 50       	subi	r25, 0x01	; 1
 8e0:	50 40       	sbci	r21, 0x00	; 0
 8e2:	a9 f7       	brne	.-22     	; 0x8ce <__mulsf3_pse+0x64>
 8e4:	9e 3f       	cpi	r25, 0xFE	; 254
 8e6:	51 05       	cpc	r21, r1
 8e8:	80 f0       	brcs	.+32     	; 0x90a <__mulsf3_pse+0xa0>
 8ea:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_inf>
 8ee:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>
 8f2:	5f 3f       	cpi	r21, 0xFF	; 255
 8f4:	e4 f3       	brlt	.-8      	; 0x8ee <__mulsf3_pse+0x84>
 8f6:	98 3e       	cpi	r25, 0xE8	; 232
 8f8:	d4 f3       	brlt	.-12     	; 0x8ee <__mulsf3_pse+0x84>
 8fa:	86 95       	lsr	r24
 8fc:	77 95       	ror	r23
 8fe:	67 95       	ror	r22
 900:	b7 95       	ror	r27
 902:	f7 95       	ror	r31
 904:	e7 95       	ror	r30
 906:	9f 5f       	subi	r25, 0xFF	; 255
 908:	c1 f7       	brne	.-16     	; 0x8fa <__mulsf3_pse+0x90>
 90a:	fe 2b       	or	r31, r30
 90c:	88 0f       	add	r24, r24
 90e:	91 1d       	adc	r25, r1
 910:	96 95       	lsr	r25
 912:	87 95       	ror	r24
 914:	97 f9       	bld	r25, 7
 916:	08 95       	ret

00000918 <__umulhisi3>:
 918:	a2 9f       	mul	r26, r18
 91a:	b0 01       	movw	r22, r0
 91c:	b3 9f       	mul	r27, r19
 91e:	c0 01       	movw	r24, r0
 920:	a3 9f       	mul	r26, r19
 922:	70 0d       	add	r23, r0
 924:	81 1d       	adc	r24, r1
 926:	11 24       	eor	r1, r1
 928:	91 1d       	adc	r25, r1
 92a:	b2 9f       	mul	r27, r18
 92c:	70 0d       	add	r23, r0
 92e:	81 1d       	adc	r24, r1
 930:	11 24       	eor	r1, r1
 932:	91 1d       	adc	r25, r1
 934:	08 95       	ret

00000936 <_exit>:
 936:	f8 94       	cli

00000938 <__stop_program>:
 938:	ff cf       	rjmp	.-2      	; 0x938 <__stop_program>
